services:                               # Define los servicios: son contenedores
  database:
    # Se basa en la imagen de postgres:15.10
    image: postgres:15.10
    container_name: postgres-db
    # Siempre reinicia contenedor si falla: el host, el propio contenedor o si se para manualmente
    # restart: unless-stopped           # Se reinicia si no se para manualmente
    # restart: on-failure[:max-retries] # Solo si el contenedor ha fallado, opcionalmente con un número de intentos
    restart: always
    environment:                        # Variables de entorno para configurar PostgreSQL
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: forodb
    ports:                              # Mapea el puerto 5432 del contenedor al puerto 5432 de la máquina host
      - "5432:5432"
    # Monta un volumen (pgdata) en la ruta indicada del contenedor, pero estan conectados con la ruta real del anfitrion
    # Los datos se almacenan en el sistema de archivos del anfitrión en una ruta gestionada por Docker
    # No se pierde si reinica el contenedor
    volumes:
      - pgdata:/var/lib/postgresql/data
    labels:                             # Ayuda en la organización y gestión de contenedores
      - "es.upm.miw.foro=database"
  app:
    build: .                            # Construye el contenedor a partir del Dockerfile en el directorio actual
    container_name: foro-api
    restart: always
    depends_on:                         # Este servicio depende del servicio database y debe arrancar después
      - database
    ports:
      - "8081:8081"
    environment:                        # Variables de entorno de Spring para configurar la conexión a la base de datos:
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/forodb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      # none: no hace nada con el esquema
      # validate: valida si realizar cambios
      # update: añade las nuevas columnas y tablas, pero no quita lo obsoleto
      # createUser: elimina el esquema existente antes de crearlo nuevamente
      # createUser-drop: parecido al anterior, pero lo elimina al detener
      SPRING_JPA_HIBERNATE_DDL_AUTO: update

      EMAIL_USERNAME: ${EMAIL_USERNAME}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
    labels:
      - "es.upm.miw.foro=app"
volumes:
  pgdata:
    name: "postgres-data"                # Nombre amigable para el volumen

# ========================== COMANDOS =================================================================
# Comando de construcción de imágenes y ejecución de contenedores definidos
# --build: forzar la reconstrucción de las imágenes de Docker antes de crear y ejecutar los contenedores
# -d (Detached Mode): Ejecuta los contenedores en segundo plano, liberando la terminal para otros comandos
# >>> docker compose up --build -d

# logs: Muestra los logs de los contenedores.
# -f (Follow): Sigue los logs en tiempo real
# >>> docker logs [-f] foro

# Detiene la ejecución sin eliminarlos
# >>> docker compose stop

# Detiene y elimina los contenedores, redes, volúmenes
# >>> docker compose down

# Me conecto a la consola del contenedor, exit para salir
#> docker exec -it postgres-betca bash

# Arranca la consola sobre Postgres, \q para salir
#> psql -U postgres

# Las dos anteriores conjuntamente, \q para salir
#> docker exec -it postgres-db psql -U postgres
